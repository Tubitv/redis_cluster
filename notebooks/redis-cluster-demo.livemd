<!-- livebook:{"persist_outputs":true} -->

# Redis Cluster Demo

```elixir
Mix.install([
  {:redis_cluster, path: Path.expand("../", __DIR__)},
  {:kino_vega_lite, "~> 0.1.13"}
])
```

## Summary

Redis is an in-memory key-value store. In it's most basic form, it has a single server that contains all the key-value pairs. It can optionally have up to 5 read replicas (at least for AWS ElastiCache). Expanding beyond this requires cluster mode, which introduces some new complexity.

## Setup

To demonstrate, let's first start up a cluster. 
It will have 12 nodes running from ports 7000-7011. 
There will be 4 masters with 2 replicas each.

```elixir
exec = Path.expand("../scripts/redis_cluster.exs", __DIR__)

{output, 0} = System.cmd(exec, ~w[start --port 7000 --replicas-per-master 2])

IO.puts(output)
```

<!-- livebook:{"output":true} -->

```
Starting Redis on port 7000
Starting Redis on port 7001
Starting Redis on port 7002
Starting Redis on port 7003
Starting Redis on port 7004
Starting Redis on port 7005
Starting Redis on port 7006
Starting Redis on port 7007
Starting Redis on port 7008
Starting Redis on port 7009
Starting Redis on port 7010
Starting Redis on port 7011
Waiting for Redis instances to start...
Creating Redis Cluster with nodes: ["127.0.0.1:7000", "127.0.0.1:7001", "127.0.0.1:7002", "127.0.0.1:7003", "127.0.0.1:7004", "127.0.0.1:7005", "127.0.0.1:7006", "127.0.0.1:7007", "127.0.0.1:7008", "127.0.0.1:7009", "127.0.0.1:7010", "127.0.0.1:7011"]

```

<!-- livebook:{"output":true} -->

```
:ok
```

Next, we connect to the cluster.

```elixir
config = %RedisCluster.Configuration{
  host: "localhost",
  port: 7000,
  name: Test.Redis,
  registry: Test.Redis.Registry__,
  pool: Test.Redis.Pool__,
  cluster: Test.Redis.Cluster__,
  shard_discovery: Test.Redis.ShardDiscovery__,
  pool_size: 3
}

pid = case RedisCluster.Cluster.start_link(config) do
  {:ok, pid} -> pid
  {:error, {:already_started, pid}} -> pid
end
```

<!-- livebook:{"output":true} -->

```
#PID<0.248.0>
```

<!-- livebook:{"output":true} -->

```

13:07:39.328 [debug] Discovering shards for Elixir.Test.Redis

13:07:39.361 [debug] Found cluster info [%RedisCluster.Cluster.NodeInfo{id: "21881382bcb056cbf6c17db98fc003029a3dd419", slots: [{RedisCluster.HashSlots, 8192, 12287, :master, "127.0.0.1", 7002}], host: "127.0.0.1", port: 7002, role: :master}, %RedisCluster.Cluster.NodeInfo{id: "2503ef0ec97437cb17417ea7a50af8513965f19a", slots: [{RedisCluster.HashSlots, 8192, 12287, :replica, "127.0.0.1", 7011}], host: "127.0.0.1", port: 7011, role: :replica}, %RedisCluster.Cluster.NodeInfo{id: "8aa1ee4f6950da75fd920f8c658f98350e6ec0a0", slots: [{RedisCluster.HashSlots, 8192, 12287, :replica, "127.0.0.1", 7010}], host: "127.0.0.1", port: 7010, role: :replica}, %RedisCluster.Cluster.NodeInfo{id: "142452ee9826210ac0430e79e6957706433def35", slots: [{RedisCluster.HashSlots, 0, 4095, :master, "127.0.0.1", 7000}], host: "127.0.0.1", port: 7000, role: :master}, %RedisCluster.Cluster.NodeInfo{id: "b6db8596b01aa66195112398843f438c67b329bf", slots: [{RedisCluster.HashSlots, 0, 4095, :replica, "127.0.0.1", 7004}], host: "127.0.0.1", port: 7004, role: :replica}, %RedisCluster.Cluster.NodeInfo{id: "db081ccfdbcaaada8d2ed5fd66a689ff8672cb7c", slots: [{RedisCluster.HashSlots, 0, 4095, :replica, "127.0.0.1", 7005}], host: "127.0.0.1", port: 7005, role: :replica}, %RedisCluster.Cluster.NodeInfo{id: "3b5452348381f0cee588a34fc340307f10b44642", slots: [{RedisCluster.HashSlots, 12288, 16383, :master, "127.0.0.1", 7003}], host: "127.0.0.1", port: 7003, role: :master}, %RedisCluster.Cluster.NodeInfo{id: "e57264ddc24e379bbd714591496e6a565db2130c", slots: [{RedisCluster.HashSlots, 12288, 16383, :replica, "127.0.0.1", 7007}], host: "127.0.0.1", port: 7007, role: :replica}, %RedisCluster.Cluster.NodeInfo{id: "ea93941b685ea2f7502f5277d122a58baad84447", slots: [{RedisCluster.HashSlots, 12288, 16383, :replica, "127.0.0.1", 7008}], host: "127.0.0.1", port: 7008, role: :replica}, %RedisCluster.Cluster.NodeInfo{id: "841b819ac076602fecb1a0e24028b56df3a99646", slots: [{RedisCluster.HashSlots, 4096, 8191, :master, "127.0.0.1", 7001}], host: "127.0.0.1", port: 7001, role: :master}, %RedisCluster.Cluster.NodeInfo{id: "59e4d90a08ae6c36a5c4157d82c6a35d2baf6e13", slots: [{RedisCluster.HashSlots, 4096, 8191, :replica, "127.0.0.1", 7006}], host: "127.0.0.1", port: 7006, role: :replica}, %RedisCluster.Cluster.NodeInfo{id: "5245762dd2cd304ca421e7d3eec68b7077eb94bb", slots: [{RedisCluster.HashSlots, 4096, 8191, :replica, "127.0.0.1", 7009}], host: "127.0.0.1", port: 7009, role: :replica}]

```

This starts a supervisor that watches connection pools, among other things. 
Re-run the following cell if you don't see all the connections.
It takes a moment to discover them all.

```elixir
Kino.Process.render_sup_tree(pid, direction: :left_right)
```

<!-- livebook:{"output":true} -->

```mermaid
graph LR;
2(Test.Redis.Pool__):::supervisor ---> 23(#PID<0.311.0>):::worker
2(Test.Redis.Pool__):::supervisor ---> 35(#PID<0.259.0>):::worker
2(Test.Redis.Pool__):::supervisor ---> 15(#PID<0.313.0>):::worker
2(Test.Redis.Pool__):::supervisor ---> 9(#PID<0.305.0>):::worker
40(Test.Redis.Registry__.PIDPartition0):::worker -..- 37(#PID<0.319.0>):::worker
2(Test.Redis.Pool__):::supervisor ---> 6(#PID<0.265.0>):::worker
2(Test.Redis.Pool__):::supervisor ---> 36(#PID<0.323.0>):::worker
17(#PID<0.287.0>):::worker -..- 40(Test.Redis.Registry__.PIDPartition0):::worker
2(Test.Redis.Pool__):::supervisor ---> 31(#PID<0.263.0>):::worker
2(Test.Redis.Pool__):::supervisor ---> 7(#PID<0.261.0>):::worker
20(#PID<0.307.0>):::worker -..- 40(Test.Redis.Registry__.PIDPartition0):::worker
24(#PID<0.271.0>):::worker -..- 40(Test.Redis.Registry__.PIDPartition0):::worker
22(#PID<0.317.0>):::worker -..- 40(Test.Redis.Registry__.PIDPartition0):::worker
2(Test.Redis.Pool__):::supervisor ---> 3(#PID<0.315.0>):::worker
2(Test.Redis.Pool__):::supervisor ---> 18(#PID<0.289.0>):::worker
2(Test.Redis.Pool__):::supervisor ---> 22(#PID<0.317.0>):::worker
2(Test.Redis.Pool__):::supervisor ---> 5(#PID<0.281.0>):::worker
28(#PID<0.275.0>):::worker -..- 40(Test.Redis.Registry__.PIDPartition0):::worker
32(#PID<0.309.0>):::worker -..- 40(Test.Redis.Registry__.PIDPartition0):::worker
2(Test.Redis.Pool__):::supervisor ---> 38(#PID<0.283.0>):::worker
26(#PID<0.257.0>):::worker -..- 40(Test.Redis.Registry__.PIDPartition0):::worker
2(Test.Redis.Pool__):::supervisor ---> 29(#PID<0.267.0>):::worker
35(#PID<0.259.0>):::worker -..- 40(Test.Redis.Registry__.PIDPartition0):::worker
2(Test.Redis.Pool__):::supervisor ---> 26(#PID<0.257.0>):::worker
2(Test.Redis.Pool__):::supervisor ---> 20(#PID<0.307.0>):::worker
2(Test.Redis.Pool__):::supervisor ---> 17(#PID<0.287.0>):::worker
13(#PID<0.255.0>):::worker -..- 40(Test.Redis.Registry__.PIDPartition0):::worker
2(Test.Redis.Pool__):::supervisor ---> 14(#PID<0.325.0>):::worker
36(#PID<0.323.0>):::worker -..- 40(Test.Redis.Registry__.PIDPartition0):::worker
21(#PID<0.277.0>):::worker -..- 40(Test.Redis.Registry__.PIDPartition0):::worker
4(#PID<0.299.0>):::worker -..- 40(Test.Redis.Registry__.PIDPartition0):::worker
2(Test.Redis.Pool__):::supervisor ---> 28(#PID<0.275.0>):::worker
27(#PID<0.301.0>):::worker -..- 40(Test.Redis.Registry__.PIDPartition0):::worker
2(Test.Redis.Pool__):::supervisor ---> 24(#PID<0.271.0>):::worker
2(Test.Redis.Pool__):::supervisor ---> 13(#PID<0.255.0>):::worker
23(#PID<0.311.0>):::worker -..- 40(Test.Redis.Registry__.PIDPartition0):::worker
11(#PID<0.285.0>):::worker -..- 40(Test.Redis.Registry__.PIDPartition0):::worker
2(Test.Redis.Pool__):::supervisor ---> 11(#PID<0.285.0>):::worker
2(Test.Redis.Pool__):::supervisor ---> 27(#PID<0.301.0>):::worker
14(#PID<0.325.0>):::worker -..- 40(Test.Redis.Registry__.PIDPartition0):::worker
15(#PID<0.313.0>):::worker -..- 40(Test.Redis.Registry__.PIDPartition0):::worker
2(Test.Redis.Pool__):::supervisor ---> 10(#PID<0.303.0>):::worker
12(#PID<0.273.0>):::worker -..- 40(Test.Redis.Registry__.PIDPartition0):::worker
40(Test.Redis.Registry__.PIDPartition0):::worker -..- 38(#PID<0.283.0>):::worker
31(#PID<0.263.0>):::worker -..- 40(Test.Redis.Registry__.PIDPartition0):::worker
19(#PID<0.269.0>):::worker -..- 40(Test.Redis.Registry__.PIDPartition0):::worker
0(Test.Redis.Cluster__):::root ---> 2(Test.Redis.Pool__):::supervisor
39(Test.Redis.Registry__):::supervisor ---> 40(Test.Redis.Registry__.PIDPartition0):::worker
5(#PID<0.281.0>):::worker -..- 40(Test.Redis.Registry__.PIDPartition0):::worker
9(#PID<0.305.0>):::worker -..- 40(Test.Redis.Registry__.PIDPartition0):::worker
33(#PID<0.297.0>):::worker -..- 40(Test.Redis.Registry__.PIDPartition0):::worker
2(Test.Redis.Pool__):::supervisor ---> 25(#PID<0.279.0>):::worker
29(#PID<0.267.0>):::worker -..- 40(Test.Redis.Registry__.PIDPartition0):::worker
25(#PID<0.279.0>):::worker -..- 40(Test.Redis.Registry__.PIDPartition0):::worker
0(Test.Redis.Cluster__):::root ---> 1(Test.Redis.ShardDiscovery__):::worker
0(Test.Redis.Cluster__):::root ---> 39(Test.Redis.Registry__):::supervisor
2(Test.Redis.Pool__):::supervisor ---> 12(#PID<0.273.0>):::worker
16(#PID<0.321.0>):::worker -..- 40(Test.Redis.Registry__.PIDPartition0):::worker
34(#PID<0.291.0>):::worker -..- 40(Test.Redis.Registry__.PIDPartition0):::worker
7(#PID<0.261.0>):::worker -..- 40(Test.Redis.Registry__.PIDPartition0):::worker
2(Test.Redis.Pool__):::supervisor ---> 4(#PID<0.299.0>):::worker
2(Test.Redis.Pool__):::supervisor ---> 34(#PID<0.291.0>):::worker
6(#PID<0.265.0>):::worker -..- 40(Test.Redis.Registry__.PIDPartition0):::worker
2(Test.Redis.Pool__):::supervisor ---> 30(#PID<0.293.0>):::worker
3(#PID<0.315.0>):::worker -..- 40(Test.Redis.Registry__.PIDPartition0):::worker
2(Test.Redis.Pool__):::supervisor ---> 19(#PID<0.269.0>):::worker
30(#PID<0.293.0>):::worker -..- 40(Test.Redis.Registry__.PIDPartition0):::worker
2(Test.Redis.Pool__):::supervisor ---> 21(#PID<0.277.0>):::worker
8(#PID<0.295.0>):::worker -..- 40(Test.Redis.Registry__.PIDPartition0):::worker
10(#PID<0.303.0>):::worker -..- 40(Test.Redis.Registry__.PIDPartition0):::worker
2(Test.Redis.Pool__):::supervisor ---> 37(#PID<0.319.0>):::worker
2(Test.Redis.Pool__):::supervisor ---> 33(#PID<0.297.0>):::worker
2(Test.Redis.Pool__):::supervisor ---> 16(#PID<0.321.0>):::worker
2(Test.Redis.Pool__):::supervisor ---> 8(#PID<0.295.0>):::worker
18(#PID<0.289.0>):::worker -..- 40(Test.Redis.Registry__.PIDPartition0):::worker
2(Test.Redis.Pool__):::supervisor ---> 32(#PID<0.309.0>):::worker
classDef root fill:#c4b5fd, stroke:#374151, stroke-width:4px, line-height:1.5em;
classDef supervisor fill:#c4b5fd, stroke:#374151, stroke-width:1px, line-height:1.5em;
classDef worker fill:#66c2a5, stroke:#374151, stroke-width:1px, line-height:1.5em;
classDef notstarted color:#777, fill:#d9d9d9, stroke:#777, stroke-width:1px, line-height:1.5em;
classDef ets fill:#a5f3fc, stroke:#374151, stroke-width:1px;


```

Then, we confirm the Redis cluster topology.

```elixir
config
|> RedisCluster.HashSlots.all_slots()
|> Enum.sort()
```

<!-- livebook:{"output":true} -->

```
[
  {RedisCluster.HashSlots, 0, 4095, :master, "127.0.0.1", 7000},
  {RedisCluster.HashSlots, 0, 4095, :replica, "127.0.0.1", 7004},
  {RedisCluster.HashSlots, 0, 4095, :replica, "127.0.0.1", 7005},
  {RedisCluster.HashSlots, 4096, 8191, :master, "127.0.0.1", 7001},
  {RedisCluster.HashSlots, 4096, 8191, :replica, "127.0.0.1", 7006},
  {RedisCluster.HashSlots, 4096, 8191, :replica, "127.0.0.1", 7009},
  {RedisCluster.HashSlots, 8192, 12287, :master, "127.0.0.1", 7002},
  {RedisCluster.HashSlots, 8192, 12287, :replica, "127.0.0.1", 7010},
  {RedisCluster.HashSlots, 8192, 12287, :replica, "127.0.0.1", 7011},
  {RedisCluster.HashSlots, 12288, 16383, :master, "127.0.0.1", 7003},
  {RedisCluster.HashSlots, 12288, 16383, :replica, "127.0.0.1", 7007},
  {RedisCluster.HashSlots, 12288, 16383, :replica, "127.0.0.1", 7008}
]
```

## Hash Slots

In clustered mode, the key is run through a CRC-16 X-Modem function modulo 16,384. This gives a range of 0-16,383. This keyspace is split up among all the master nodes.

Let's query the cluster and see what this looks like.

```elixir
config
|> RedisCluster.HashSlots.all_slots()
|> Enum.filter(fn {_mod, _lo, _hi, role, _host, _port} -> role == :master end)
|> Enum.sort()
```

<!-- livebook:{"output":true} -->

```
[
  {RedisCluster.HashSlots, 0, 4095, :master, "127.0.0.1", 7000},
  {RedisCluster.HashSlots, 4096, 8191, :master, "127.0.0.1", 7001},
  {RedisCluster.HashSlots, 8192, 12287, :master, "127.0.0.1", 7002},
  {RedisCluster.HashSlots, 12288, 16383, :master, "127.0.0.1", 7003}
]
```

With a fresh cluster, we should have four ranges:

* 0-4095
* 4096-8191
* 8192-12,287
* 12,288-16,383

If a cluster adds and removes shards, these ranges can become fragmented. For simplicity in the examples, we'll stick with these nice ranges.

Now, let's take some arbitrary keys and see what they hash to.

```elixir
for key <- ~w[1 2 3 4 5] do
  slot = RedisCluster.Key.hash_slot(key)
  IO.puts("#{key} => #{slot}")
end
```

<!-- livebook:{"output":true} -->

```
1 => 9842
2 => 5649
3 => 1584
4 => 14039
5 => 9974
```

<!-- livebook:{"output":true} -->

```
[:ok, :ok, :ok, :ok, :ok]
```

Even though these keys are sequential numbers, the hashes are (ideally) randomly distributed. 
This ensures each of the nodes have roughly the same number of key-value pairs.
Let's put some data in the cluster to confirm.

```elixir
pairs = [
  {"1", "one"},
  {"2", "two"},
  {"3", "three"},
  {"4", "four"},
  {"5", "five"},
  {"6", "six"},
  {"7", "seven"},
  {"8", "eight"},
  {"9", "nine"},
  {"10", "ten"}
]

for {k, v} <- pairs do
  RedisCluster.Cluster.set(config, k, v)
  slot = RedisCluster.Key.hash_slot(k)
  IO.puts("{#{k}, #{v}} => #{slot}")
end
```

<!-- livebook:{"output":true} -->

```
{1, one} => 9842
{2, two} => 5649
{3, three} => 1584
{4, four} => 14039
{5, five} => 9974
{6, six} => 5781
{7, seven} => 1716
{8, eight} => 14171
{9, nine} => 10106
{10, ten} => 247
```

<!-- livebook:{"output":true} -->

```
[:ok, :ok, :ok, :ok, :ok, :ok, :ok, :ok, :ok, :ok]
```

```elixir
config
|> RedisCluster.Cluster.broadcast([~w[DBSIZE]], role: :master)
|> Enum.sort()
```

<!-- livebook:{"output":true} -->

```
[
  {"127.0.0.1", 7000, {:ok, [3]}},
  {"127.0.0.1", 7001, {:ok, [2]}},
  {"127.0.0.1", 7002, {:ok, [3]}},
  {"127.0.0.1", 7003, {:ok, [2]}}
]
```

As long as only the above 10 keys have been written to this cluster, there will be 2 nodes with 2 keys and 2 nodes with 3 keys. That's as even as it gets for such a small set of keys.

## Hash Tags

Next, let's look at a caveat with Redis clusters. Previously, we saw that keys 1, 5, and 9 are on the same node (range 8192-12,287).
So that means we should be able to fetch them in one request with [MGET](https://redis.io/docs/latest/commands/mget/), right?

```elixir
RedisCluster.Cluster.command(config, ~w[MGET 1 5 9], key: "1")
```

<!-- livebook:{"output":true} -->

```
{:error, %Redix.Error{message: "CROSSSLOT Keys in request don't hash to the same slot"}}
```

Wrong. We get the error `CROSSSLOT Keys in request don't hash to the same slot`. 
This means that the keys must hash to the exact value, even if they happen to live on the same node.
With hashes randomly distributed, there's only 1:16,384 change that any two arbitrary keys have the same hash slot. 
So, it seems that we can't use MGET, right?

Wrong. There is a viable option. We can use hash tags.

A hash tag specifies a subset of the key to use for calculating the hash slot. It looks like this:

```elixir
keys = [
  "{user1234}:orders",
  "{user1234}:search_history",
  "{user1234}:contact_info",
]

for key <- keys do
  RedisCluster.Key.hash_slot(key, compute_hash_tag: true)
end
```

<!-- livebook:{"output":true} -->

```
[14020, 14020, 14020]
```

All three keys have the same hash slot: 14,020. 
This is the same as if you calculated the hash slot of `user1234`.

```elixir
RedisCluster.Key.hash_slot("user1234")
```

<!-- livebook:{"output":true} -->

```
14020
```

Notice the extra `:compute_hash_tag` option.
The `RedisCluster` library doesn't look for a hash tag unless you request it. 
This avoids any unnecessary overhead if you don't use hash tags.

Also, note that it doesn't matter where in the key the hash tag appears.

```elixir
keys = [
  "orders:{user1234}",
  "search_history:{user1234}",
  "contact_info:{user1234}",
]

for key <- keys do
  RedisCluster.Key.hash_slot(key, compute_hash_tag: true)
end
```

<!-- livebook:{"output":true} -->

```
[14020, 14020, 14020]
```

You can also confirm this behavior by calling the `CLUSTER KEYSLOT <key>` command.

```elixir
for key <- keys do
  RedisCluster.Cluster.command(config, ["CLUSTER", "KEYSLOT", key], key: key)
end
```

<!-- livebook:{"output":true} -->

```
[14020, 14020, 14020]
```

You'll notice the extra `:key` option. This helps the `RedisCluster` library know which node to call.
Though in this case it doesn't matter. 
Any node receiving this command can respond appropriately. 
The node isn't looking up the data, it's just computing the slot.

<!-- livebook:{"break_markdown":true} -->

Let's try `MGET` again.

```elixir
set_cmd =  ~w/MSET {user1234}:orders "[]" {user1234}:search_history ["redis"] {user1234}:contact_info [test@example.com]/
RedisCluster.Cluster.command(config, set_cmd, key: "user1234", compute_hash_tag: true)

get_cmd = ~w[MGET {user1234}:contact_info {user1234}:orders {user1234}:search_history]
RedisCluster.Cluster.command(config, get_cmd, key: "user1234", compute_hash_tag: true)
```

<!-- livebook:{"output":true} -->

```
["[test@example.com]", "\"[]\"", "[\"redis\"]"]
```

You can use binary data as a key. 
However, you need to watch out for the rare chance you have a `{` character (hex `0x7B`)) followed by a `}` character (hex `0x7C`). 
Because of this, it's recommended to prepend `{}` to the start of your key.
When an empty hash tag is found, the full key is always used.

```elixir
binary_key = "{}" <> <<0xDE, 0xAD, 0xBE, 0xEF>>
RedisCluster.Key.hash_slot(binary_key, compute_hash_tag: true)
```

<!-- livebook:{"output":true} -->

```
16021
```

```elixir
cmd = ["CLUSTER", "KEYSLOT", binary_key]
RedisCluster.Cluster.command(config, cmd, key: binary_key, compute_hash_tag: true)
```

<!-- livebook:{"output":true} -->

```
16021
```

Instead of using hashtags to ensure related data is stored on the same node, you can use a Hash. The Redis folks must really love the word "hash". A Hash is also known as a hash table, map, or dictionary.

```elixir
set_cmd =  ~w/HSET user1234 orders "[]" search_history ["redis"] contact_info [test@example.com]/
RedisCluster.Cluster.command(config, set_cmd, key: "user1234")
```

<!-- livebook:{"output":true} -->

```
3
```

```elixir
RedisCluster.Cluster.command(config, ~w[HKEYS user1234], key: "user1234")
```

<!-- livebook:{"output":true} -->

```
["orders", "search_history", "contact_info"]
```

```elixir
RedisCluster.Cluster.command(config, ~w[HGET user1234 search_history], key: "user1234")
```

<!-- livebook:{"output":true} -->

```
"[\"redis\"]"
```

Redis supports other data types such as 
[lists](https://redis.io/docs/latest/commands/?group=list), 
[sets](https://redis.io/docs/latest/commands/?group=set), 
[sorted sets](https://redis.io/docs/latest/commands/?group=sorted-set), 
[lua scripts](https://redis.io/docs/latest/commands/?group=scripting), 
[bloom filters](https://redis.io/docs/latest/commands/?group=bf), and more.
Check them out in the [docs](https://redis.io/docs/latest/).

## Discovery

So, how does the `RedisCluster` library know which node to send a command to?
This is where the node discovery process comes in. 
The `RedisCluster` library is configured with a URL to connect to a node. 
Ideally this URL should be a "configuration endpoint" as AWS ElastiCache calls it.
The configuration endpoint picks a random node to connect to. 
This ensures one node isn't being hit every time the cluster needs to be discovered.

The `RedisCluster` library sends a [`CLUSTER SHARDS` command](https://redis.io/docs/latest/commands/cluster-shards/)
to the connected node. 
Or for pre-v7 nodes, the [`CLUSTER SLOTS` command](https://redis.io/docs/latest/commands/cluster-slots/).

```elixir
RedisCluster.Cluster.command(config, ~w[CLUSTER SHARDS], key: "arbitrary")
```

<!-- livebook:{"output":true} -->

```
[
  [
    "slots",
    [8192, 12287],
    "nodes",
    [
      ["id", "21881382bcb056cbf6c17db98fc003029a3dd419", "port", 7002, "ip", "127.0.0.1",
       "endpoint", "127.0.0.1", "role", "master", "replication-offset", 168, "health", "online"],
      ["id", "2503ef0ec97437cb17417ea7a50af8513965f19a", "port", 7011, "ip", "127.0.0.1",
       "endpoint", "127.0.0.1", "role", "replica", "replication-offset", 168, "health", "online"],
      ["id", "8aa1ee4f6950da75fd920f8c658f98350e6ec0a0", "port", 7010, "ip", "127.0.0.1",
       "endpoint", "127.0.0.1", "role", "replica", "replication-offset", 168, "health", "online"]
    ]
  ],
  [
    "slots",
    [12288, 16383],
    "nodes",
    [
      ["id", "3b5452348381f0cee588a34fc340307f10b44642", "port", 7003, "ip", "127.0.0.1",
       "endpoint", "127.0.0.1", "role", "master", "replication-offset", 420, "health", "online"],
      ["id", "ea93941b685ea2f7502f5277d122a58baad84447", "port", 7008, "ip", "127.0.0.1",
       "endpoint", "127.0.0.1", "role", "replica", "replication-offset", 420, "health", "online"],
      ["id", "e57264ddc24e379bbd714591496e6a565db2130c", "port", 7007, "ip", "127.0.0.1",
       "endpoint", "127.0.0.1", "role", "replica", "replication-offset", 420, "health", "online"]
    ]
  ],
  [
    "slots",
    [4096, 8191],
    "nodes",
    [
      ["id", "841b819ac076602fecb1a0e24028b56df3a99646", "port", 7001, "ip", "127.0.0.1",
       "endpoint", "127.0.0.1", "role", "master", "replication-offset", 137, "health", "online"],
      ["id", "5245762dd2cd304ca421e7d3eec68b7077eb94bb", "port", 7009, "ip", "127.0.0.1",
       "endpoint", "127.0.0.1", "role", "replica", "replication-offset", 137, "health", "online"],
      ["id", "59e4d90a08ae6c36a5c4157d82c6a35d2baf6e13", "port", 7006, "ip", "127.0.0.1",
       "endpoint", "127.0.0.1", "role", "replica", "replication-offset", 137, "health", "online"]
    ]
  ],
  [
    "slots",
    [0, 4095],
    "nodes",
    [
      ["id", "142452ee9826210ac0430e79e6957706433def35", "port", 7000, "ip", "127.0.0.1",
       "endpoint", "127.0.0.1", "role", "master", "replication-offset", 171, "health", "online"],
      ["id", "b6db8596b01aa66195112398843f438c67b329bf", "port", 7004, "ip", "127.0.0.1",
       "endpoint", "127.0.0.1", "role", "replica", "replication-offset", 171, "health", "online"],
      ["id", "db081ccfdbcaaada8d2ed5fd66a689ff8672cb7c", "port", 7005, "ip", "127.0.0.1",
       "endpoint", "127.0.0.1", "role", "replica", "replication-offset", 171, "health", "online"]
    ]
  ]
]
```

That's quite a bit of data to sift through. 
You can see it in a nicer form with `RedisCluster.HashSlots.all_slots/1`.

```elixir
config
|> RedisCluster.HashSlots.all_slots()
|> Enum.sort()
```

<!-- livebook:{"output":true} -->

```
[
  {RedisCluster.HashSlots, 0, 4095, :master, "127.0.0.1", 7000},
  {RedisCluster.HashSlots, 0, 4095, :replica, "127.0.0.1", 7004},
  {RedisCluster.HashSlots, 0, 4095, :replica, "127.0.0.1", 7005},
  {RedisCluster.HashSlots, 4096, 8191, :master, "127.0.0.1", 7001},
  {RedisCluster.HashSlots, 4096, 8191, :replica, "127.0.0.1", 7006},
  {RedisCluster.HashSlots, 4096, 8191, :replica, "127.0.0.1", 7009},
  {RedisCluster.HashSlots, 8192, 12287, :master, "127.0.0.1", 7002},
  {RedisCluster.HashSlots, 8192, 12287, :replica, "127.0.0.1", 7010},
  {RedisCluster.HashSlots, 8192, 12287, :replica, "127.0.0.1", 7011},
  {RedisCluster.HashSlots, 12288, 16383, :master, "127.0.0.1", 7003},
  {RedisCluster.HashSlots, 12288, 16383, :replica, "127.0.0.1", 7007},
  {RedisCluster.HashSlots, 12288, 16383, :replica, "127.0.0.1", 7008}
]
```

If the `RedisCluster.Cluster` module sends a command and sees a `MOVED` error, ex. `MOVED 3720 127.0.0.1:7000`, then it assumes the cluster topology changed.
It then tries to rediscover the cluster.
For most commands it will retry the command once more.
If it fails again, then there could be a problem with the cluster or the connection to it.

## Using RedisCluster

The prior examples used `RedisCluster.Cluster` directly. 
Though you will likely interact with it using a custom module. 
Start with adding your config. 
This could be in `config.exs` but more likely you will use env vars in `runtime.exs`.

```elixir
Application.put_all_env(myapp: [{MyApp.Redis, [host: "localhost", port: 7000, pool_size: 3]}])
```

<!-- livebook:{"output":true} -->

```
:ok
```

Then you create your own module that uses the `RedisCluster` module.
The `@config` attribute is available for convenience.

```elixir
defmodule MyApp.Redis do
  use RedisCluster, otp_app: :myapp

  def hset(key, pairs) do
    pairs = Enum.flat_map(pairs, fn {k, v} -> [k, v] end)
    cmd = ["HSET", key | pairs]

    RedisCluster.Cluster.command(@config, cmd, key: key)
  end

  def hkeys(key) do
    RedisCluster.Cluster.command(@config, ["HKEYS", key], key: key)
  end

  def hget(key, field) do
    RedisCluster.Cluster.command(@config, ["HGET", key, field], key: key)
  end

  def hdel(_key, []) do
    0
  end

  def hdel(key, fields) do
    RedisCluster.Cluster.command(@config, ["HDEL", key | fields], key: key)
  end
end
```

<!-- livebook:{"output":true} -->

```
{:module, MyApp.Redis, <<70, 79, 82, 49, 0, 0, 24, ...>>, {:hdel, 2}}
```

The `RedisCluster` module will automatically add common functions such as `get/2`, `set/3`, `command/2`, and `pipeline/2`. 
You can add your own convenience functions depending on which Redis commands your application needs.
Notice the above module adds `hset/2`, `hkeys/1`, and `hget/2`.

Don't forget to add your module to your supervision tree.
For this Livebook we'll start it directly.

```elixir
case MyApp.Redis.start_link([]) do
  {:ok, pid} -> pid
  {:error, {:already_started, pid}} -> pid
end
```

<!-- livebook:{"output":true} -->

```

13:14:44.166 [debug] Discovering shards for Elixir.MyApp.Redis

```

<!-- livebook:{"output":true} -->

```
#PID<0.357.0>
```

<!-- livebook:{"output":true} -->

```

13:14:44.168 [debug] Found cluster info [%RedisCluster.Cluster.NodeInfo{id: "21881382bcb056cbf6c17db98fc003029a3dd419", slots: [{RedisCluster.HashSlots, 8192, 12287, :master, "127.0.0.1", 7002}], host: "127.0.0.1", port: 7002, role: :master}, %RedisCluster.Cluster.NodeInfo{id: "2503ef0ec97437cb17417ea7a50af8513965f19a", slots: [{RedisCluster.HashSlots, 8192, 12287, :replica, "127.0.0.1", 7011}], host: "127.0.0.1", port: 7011, role: :replica}, %RedisCluster.Cluster.NodeInfo{id: "8aa1ee4f6950da75fd920f8c658f98350e6ec0a0", slots: [{RedisCluster.HashSlots, 8192, 12287, :replica, "127.0.0.1", 7010}], host: "127.0.0.1", port: 7010, role: :replica}, %RedisCluster.Cluster.NodeInfo{id: "142452ee9826210ac0430e79e6957706433def35", slots: [{RedisCluster.HashSlots, 0, 4095, :master, "127.0.0.1", 7000}], host: "127.0.0.1", port: 7000, role: :master}, %RedisCluster.Cluster.NodeInfo{id: "b6db8596b01aa66195112398843f438c67b329bf", slots: [{RedisCluster.HashSlots, 0, 4095, :replica, "127.0.0.1", 7004}], host: "127.0.0.1", port: 7004, role: :replica}, %RedisCluster.Cluster.NodeInfo{id: "db081ccfdbcaaada8d2ed5fd66a689ff8672cb7c", slots: [{RedisCluster.HashSlots, 0, 4095, :replica, "127.0.0.1", 7005}], host: "127.0.0.1", port: 7005, role: :replica}, %RedisCluster.Cluster.NodeInfo{id: "3b5452348381f0cee588a34fc340307f10b44642", slots: [{RedisCluster.HashSlots, 12288, 16383, :master, "127.0.0.1", 7003}], host: "127.0.0.1", port: 7003, role: :master}, %RedisCluster.Cluster.NodeInfo{id: "e57264ddc24e379bbd714591496e6a565db2130c", slots: [{RedisCluster.HashSlots, 12288, 16383, :replica, "127.0.0.1", 7007}], host: "127.0.0.1", port: 7007, role: :replica}, %RedisCluster.Cluster.NodeInfo{id: "ea93941b685ea2f7502f5277d122a58baad84447", slots: [{RedisCluster.HashSlots, 12288, 16383, :replica, "127.0.0.1", 7008}], host: "127.0.0.1", port: 7008, role: :replica}, %RedisCluster.Cluster.NodeInfo{id: "841b819ac076602fecb1a0e24028b56df3a99646", slots: [{RedisCluster.HashSlots, 4096, 8191, :master, "127.0.0.1", 7001}], host: "127.0.0.1", port: 7001, role: :master}, %RedisCluster.Cluster.NodeInfo{id: "59e4d90a08ae6c36a5c4157d82c6a35d2baf6e13", slots: [{RedisCluster.HashSlots, 4096, 8191, :replica, "127.0.0.1", 7006}], host: "127.0.0.1", port: 7006, role: :replica}, %RedisCluster.Cluster.NodeInfo{id: "5245762dd2cd304ca421e7d3eec68b7077eb94bb", slots: [{RedisCluster.HashSlots, 4096, 8191, :replica, "127.0.0.1", 7009}], host: "127.0.0.1", port: 7009, role: :replica}]

```

From here you can call it directly. 
Notice how much nicer the Hash data type is to work with using the convenience functions we added.

```elixir
MyApp.Redis.hset("myhash", %{a: "1", b: "2", c: "3"})
```

<!-- livebook:{"output":true} -->

```
3
```

```elixir
MyApp.Redis.hkeys("myhash")
```

<!-- livebook:{"output":true} -->

```
["c", "a", "b"]
```

```elixir
MyApp.Redis.hget("myhash", "a")
```

<!-- livebook:{"output":true} -->

```
"1"
```

```elixir
MyApp.Redis.hdel("myhash", ~w[a b c])
```

<!-- livebook:{"output":true} -->

```
3
```

```elixir
MyApp.Redis.hget("myhash", "a")
```

<!-- livebook:{"output":true} -->

```
nil
```

The `RedisCluster.Cluster` module also has `get_many/2`, `set_many/2`, and `delete_many/2` functions.
These are not one-to-one mappings with the 
[`MGET`](https://redis.io/docs/latest/commands/mget/), 
[`MSET`](https://redis.io/docs/latest/commands/mset/), and 
[`DEL`](https://redis.io/docs/latest/commands/del/) commands.

Instead `RedisCluster` tries to be smarter by grouping commands by nodes and sending them in a batch pipeline.
These commands will fail if the cluster reshards while the commands are in flight.
The commands are also sent to each node sequentially for simplicity. 
This may not be as fast as sending the commands in parallel

```elixir
MyApp.Redis.set_many(one: 1, two: 2, three: 3, four: 4, five: 5, six: 6)
```

<!-- livebook:{"output":true} -->

```
:ok
```

```elixir
MyApp.Redis.get_many(~w[six five four three two one])
```

<!-- livebook:{"output":true} -->

```
["6", "5", "4", "3", "2", "1"]
```

```elixir
MyApp.Redis.delete_many(~w[six five four three two one])
```

<!-- livebook:{"output":true} -->

```
:ok
```

```elixir
MyApp.Redis.get_many(~w[six five four three two one])
```

<!-- livebook:{"output":true} -->

```
[nil, nil, nil, nil, nil, nil]
```

## Read Replicas

Unlike other Elixir Redis libraries, the `RedisCluster` library gives you full access to replica nodes.
This allows your Redis cluster to scale better.

Write commands **must** go to a master node.

```elixir
MyApp.Redis.command(~w[SET fail fail], key: "fail", role: :replica)
```

<!-- livebook:{"output":true} -->

```

13:14:57.731 [debug] Discovering shards for Elixir.MyApp.Redis

13:14:57.732 [debug] Found cluster info [%RedisCluster.Cluster.NodeInfo{id: "21881382bcb056cbf6c17db98fc003029a3dd419", slots: [{RedisCluster.HashSlots, 8192, 12287, :master, "127.0.0.1", 7002}], host: "127.0.0.1", port: 7002, role: :master}, %RedisCluster.Cluster.NodeInfo{id: "2503ef0ec97437cb17417ea7a50af8513965f19a", slots: [{RedisCluster.HashSlots, 8192, 12287, :replica, "127.0.0.1", 7011}], host: "127.0.0.1", port: 7011, role: :replica}, %RedisCluster.Cluster.NodeInfo{id: "8aa1ee4f6950da75fd920f8c658f98350e6ec0a0", slots: [{RedisCluster.HashSlots, 8192, 12287, :replica, "127.0.0.1", 7010}], host: "127.0.0.1", port: 7010, role: :replica}, %RedisCluster.Cluster.NodeInfo{id: "142452ee9826210ac0430e79e6957706433def35", slots: [{RedisCluster.HashSlots, 0, 4095, :master, "127.0.0.1", 7000}], host: "127.0.0.1", port: 7000, role: :master}, %RedisCluster.Cluster.NodeInfo{id: "b6db8596b01aa66195112398843f438c67b329bf", slots: [{RedisCluster.HashSlots, 0, 4095, :replica, "127.0.0.1", 7004}], host: "127.0.0.1", port: 7004, role: :replica}, %RedisCluster.Cluster.NodeInfo{id: "db081ccfdbcaaada8d2ed5fd66a689ff8672cb7c", slots: [{RedisCluster.HashSlots, 0, 4095, :replica, "127.0.0.1", 7005}], host: "127.0.0.1", port: 7005, role: :replica}, %RedisCluster.Cluster.NodeInfo{id: "3b5452348381f0cee588a34fc340307f10b44642", slots: [{RedisCluster.HashSlots, 12288, 16383, :master, "127.0.0.1", 7003}], host: "127.0.0.1", port: 7003, role: :master}, %RedisCluster.Cluster.NodeInfo{id: "e57264ddc24e379bbd714591496e6a565db2130c", slots: [{RedisCluster.HashSlots, 12288, 16383, :replica, "127.0.0.1", 7007}], host: "127.0.0.1", port: 7007, role: :replica}, %RedisCluster.Cluster.NodeInfo{id: "ea93941b685ea2f7502f5277d122a58baad84447", slots: [{RedisCluster.HashSlots, 12288, 16383, :replica, "127.0.0.1", 7008}], host: "127.0.0.1", port: 7008, role: :replica}, %RedisCluster.Cluster.NodeInfo{id: "841b819ac076602fecb1a0e24028b56df3a99646", slots: [{RedisCluster.HashSlots, 4096, 8191, :master, "127.0.0.1", 7001}], host: "127.0.0.1", port: 7001, role: :master}, %RedisCluster.Cluster.NodeInfo{id: "59e4d90a08ae6c36a5c4157d82c6a35d2baf6e13", slots: [{RedisCluster.HashSlots, 4096, 8191, :replica, "127.0.0.1", 7006}], host: "127.0.0.1", port: 7006, role: :replica}, %RedisCluster.Cluster.NodeInfo{id: "5245762dd2cd304ca421e7d3eec68b7077eb94bb", slots: [{RedisCluster.HashSlots, 4096, 8191, :replica, "127.0.0.1", 7009}], host: "127.0.0.1", port: 7009, role: :replica}]

```

<!-- livebook:{"output":true} -->

```
{:error, %Redix.Error{message: "MOVED 3720 127.0.0.1:7000"}}
```

Writing to a replica gives an error like `MOVED 3720 127.0.0.1:7000`.
In this case the replica node is redirecting you to its respective master node.

By default, the `get/2` function sends the `GET` command to a replica. 
Though you can specify it to go to a master node if you don't want any chance of stale data.

```elixir
MyApp.Redis.set("key", "value")
MyApp.Redis.get("key", role: :master)
```

<!-- livebook:{"output":true} -->

```
"value"
```

Or if you don't care which node it goes to, then you can specify `:any`.

```elixir
MyApp.Redis.get("key", role: :any)
```

<!-- livebook:{"output":true} -->

```
"value"
```
